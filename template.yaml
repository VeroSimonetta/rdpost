AWSTemplateFormatVersion: '2010-09-09'
Description: Plantilla para los recursos de la aplicaci√≥n serverless (Lambda y API Gateway).

Parameters:
  Environment:
    Type: String
  Runtime:
    Type: String
    Default: python3.12
  MemorySize:
    Type: Number
    Default: 256
  Timeout:
    Type: Number
    Default: 60
  AppName:
    Type: String
    Default: RDPost

Resources:
  # Los roles IAM para Lambda
  RdPostLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Policies:
        - PolicyName: CustomerProfilesPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "profile:CreateProfile"
                  - "profile:SearchProfiles"
                Resource: "*"
              - Effect: Allow
                Action:
                  - connect:StartOutboundVoiceContact
                  - connect:StopContact
                  - connect:GetContactAttributes
                Resource: "*"
              - Effect: Allow
                Action:
                  - cases:CreateCase
                  - cases:BatchGetField
                  - cases:GetTemplate
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  RdPostLambdaExecutionCreateCaseEmailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Policies:
        - PolicyName: CustomerProfilesPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "profile:CreateProfile"
                  - "profile:SearchProfiles"
                Resource: "*"
              - Effect: Allow
                Action: sts:GetCallerIdentity
                Resource: "*"
              - Effect: Allow
                Action:
                  - connect:StartOutboundVoiceContact
                  - connect:StopContact
                  - connect:GetContactAttributes
                Resource: "*"
              - Effect: Allow
                Action:
                  - cases:CreateCase
                  - cases:BatchGetField
                  - cases:GetTemplate
                  - cases:ListFields
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Las funciones Lambda
  PostWebcaseLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub rdpost-${Environment}-lambda-post-webcase
      Handler: app.handler
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Code:
        S3Bucket: !ImportValue ArtifactsBucketName
        S3Key: post_webcase_function.zip
      Role: !GetAtt RdPostLambdaExecutionRole.Arn
      Environment:
        Variables:
          REGION_ID: !Ref AWS::Region

  SupportLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub rdpost-${Environment}-lambda-post-support
      Handler: support_app.handler
      Runtime: python3.12
      Timeout: 60
      MemorySize: 256
      Role: !GetAtt RdPostLambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue ArtifactsBucketName
        S3Key: post_support_function.zip
      Environment:
        Variables:
          REGION_ID: !Ref AWS::Region
  
  CreateCaseEmailLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub rdpost-${Environment}-lambda-create-case-email
      Handler: app.handler
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Code:
        S3Bucket: !ImportValue ArtifactsBucketName
        S3Key: create_case_email_function.zip
      Role: !GetAtt RdPostLambdaExecutionCreateCaseEmailRole.Arn
      Environment:
        Variables:
          REGION_ID: !Ref AWS::Region

  # API Gateway
  RDPostApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AppName}-${Environment}
      Description: 'API for a serverless application.'

  APIGatewayPostCaseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RDPostApi.RootResourceId
      PathPart: 'webcase'
      RestApiId: !Ref RDPostApi

  APIGatewaySupportResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RDPostApi.RootResourceId
      PathPart: 'support'
      RestApiId: !Ref RDPostApi

  APIGatewaySupportMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref APIGatewaySupportResource
      RestApiId: !Ref RDPostApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SupportLambdaFunction.Arn}/invocations'

  APIGatewayPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref APIGatewayPostCaseResource
      RestApiId: !Ref RDPostApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostWebcaseLambdaFunction.Arn}/invocations'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIGatewayPostMethod
      - APIGatewaySupportMethod
    Properties:
      RestApiId: !Ref RDPostApi
      Description: Initial deployment

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Environment
      Description: !Sub ${Environment}-Stage
      RestApiId: !Ref RDPostApi
      DeploymentId: !Ref ApiGatewayDeployment

  PermissionForPostWebcaseLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt PostWebcaseLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RDPostApi}/*/POST/webcase'

  PermissionForSupportLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt SupportLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RDPostApi}/*/POST/support'